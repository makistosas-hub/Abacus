{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nconst locales = [\"lt\", \"en\"] as const;\nconst defaultLocale = \"lt\";\n\nconst Page = defineDocumentType(() => ({\n  name: \"Page\",\n  contentType: \"mdx\",\n  filePathPattern: \"pages/**/*.mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    description: { type: \"string\", required: true },\n    layout: { type: \"string\", required: false },\n    hero: { type: \"json\", required: false },\n    sections: { type: \"json\", required: false },\n    seo: { type: \"json\", required: false },\n    navigation: { type: \"json\", required: false },\n  },\n  computedFields: {\n    locale: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n    slugSegments: {\n      type: \"json\",\n      resolve: (doc) =>\n        doc._raw.flattenedPath.split(\"/\").slice(1, -1) as string[],\n    },\n    slug: {\n      type: \"string\",\n      resolve: (doc) => {\n        const segments = doc._raw.flattenedPath.split(\"/\").slice(1, -1);\n        const slug = segments.join(\"/\");\n        return slug || \"home\";\n      },\n    },\n    route: {\n      type: \"string\",\n      resolve: (doc) => {\n        const locale = doc._raw.sourceFileName.replace(/\\.mdx$/, \"\");\n        const segments = doc._raw.flattenedPath.split(\"/\").slice(1, -1);\n        const slug = segments.join(\"/\");\n        const normalized = slug || \"home\";\n        const localePrefix = locale === defaultLocale ? \"\" : `/${locale}`;\n        const trailing = normalized === \"home\" ? \"\" : `/${normalized}`;\n        const path = `${localePrefix}${trailing}`;\n        return path === \"\" ? \"/\" : path;\n      },\n    },\n    isDefaultLocale: {\n      type: \"boolean\",\n      resolve: (doc) =>\n        doc._raw.sourceFileName.replace(/\\.mdx$/, \"\") === defaultLocale,\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Page],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"wrap\",\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAGtB,IAAM,gBAAgB;AAEtB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,QAAQ,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IACtC,UAAU,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IAC1C,KAAK,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IACrC,YAAY,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAChE;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,QACR,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE;AAAA,IACjD;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,WAAW,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE;AAC9D,cAAM,OAAO,SAAS,KAAK,GAAG;AAC9B,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,SAAS,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAC3D,cAAM,WAAW,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE;AAC9D,cAAM,OAAO,SAAS,KAAK,GAAG;AAC9B,cAAM,aAAa,QAAQ;AAC3B,cAAM,eAAe,WAAW,gBAAgB,KAAK,IAAI,MAAM;AAC/D,cAAM,WAAW,eAAe,SAAS,KAAK,IAAI,UAAU;AAC5D,cAAM,OAAO,GAAG,YAAY,GAAG,QAAQ;AACvC,eAAO,SAAS,KAAK,MAAM;AAAA,MAC7B;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,SAAS,CAAC,QACR,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE,MAAM;AAAA,IACtD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
